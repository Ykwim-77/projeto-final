generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../Banco_de_dados/BancoProGest.db"
}

model usuario {
  id_usuario      Int      @id @default(autoincrement())
  nome            String
  email           String   @unique
  senha_hash      String
  id_tipo_usuario Int
  ativo           Boolean
  criado_em       DateTime @default(now())
  CPF             String?

  tipo_usuario  tipo_usuario   @relation(fields: [id_tipo_usuario], references: [id_tipo_usuario])
  compras       compra[]       @relation("UsuarioCompras")
  movimentacoes movimentacao[]
  relatorios    relatorio[]
  garantias     garantia[]     @relation("UsuarioGarantias")
}

model tipo_usuario {
  id_tipo_usuario Int    @id @default(autoincrement())
  descricao       String

  usuarios usuario[]
}

model produto {
  id_produto     Int     @id @default(autoincrement())
  nome           String
  descricao      String?
  categoria      String?
  codigo_publico String?
  preco_unitario Float?
  unidade_medida String?
  id_fornecedor  Int?

  estoque       estoque[]
  compras       compra[]             @relation("ProdutoCompras")
  alertas       alerta[]
  previsoes     previsao_demanda[]
  historicos    historico_previsao[]
  movimentacoes movimentacao[]
  garantias     garantia[]           @relation("ProdutoGarantias")
  fornecedor    fornecedor?          @relation(fields: [id_fornecedor], references: [id_fornecedor])
}

model estoque {
  id_estoque         Int      @id @default(autoincrement())
  id_produto         Int
  id_sala            Int
  quantidade_atual   Int
  quantidade_minima  Int
  ultima_atualizacao DateTime
  status             String?

  produto produto @relation(fields: [id_produto], references: [id_produto])
  sala    sala    @relation(fields: [id_sala], references: [id_sala])
}

model financeiro {
  id_financeiro  Int      @id @default(autoincrement())
  tipo           String
  descricao      String
  valor          Float
  data_movimento DateTime
  status         String?

  compras    compra[]
  historicos historico_previsao[]
}

model compra {
  id_compra        Int       @id @default(autoincrement())
  id_produto       Int
  id_fornecedor    Int
  id_financeiro    Int
  id_usuario       Int
  data_pedido      DateTime
  data_recebimento DateTime?
  valor_total      Float
  origem           String?
  observacoes      String?

  produto    produto    @relation("ProdutoCompras", fields: [id_produto], references: [id_produto])
  fornecedor fornecedor @relation(fields: [id_fornecedor], references: [id_fornecedor])
  financeiro financeiro @relation(fields: [id_financeiro], references: [id_financeiro])
  usuario    usuario    @relation("UsuarioCompras", fields: [id_usuario], references: [id_usuario])
}

model sala {
  id_sala     Int     @id @default(autoincrement())
  nome_sala   String
  descricao   String?
  capacidade  Int
  localizacao String?

  estoques estoque[]
}

model movimentacao {
  id_movimentacao   Int      @id @default(autoincrement())
  id_produto        Int
  id_usuario        Int
  tipo_movimentacao String
  origem            String?
  data_movimento    DateTime
  status            String?
  observacao        String?

  produto produto @relation(fields: [id_produto], references: [id_produto])
  usuario usuario @relation(fields: [id_usuario], references: [id_usuario])
}

model alerta {
  id_alerta   Int    @id @default(autoincrement())
  id_produto  Int
  tipo_alerta String
  mensagem    String

  produto produto @relation(fields: [id_produto], references: [id_produto])
}

model previsao_demanda {
  id_previsao      Int      @id @default(autoincrement())
  id_produto       Int
  data_prevista    DateTime
  demanda_prevista Int
  id_financeiro    Int?
  confianca_modelo Float?

  produto    produto              @relation(fields: [id_produto], references: [id_produto])
  historicos historico_previsao[]
}

model fornecedor {
  id_fornecedor Int     @id @default(autoincrement())
  nome          String
  cnpj          String
  telefone      String?
  email         String?
  endereco      String?

  compras  compra[]
  produtos produto[]
}

model historico_previsao {
  id_historico    Int    @id @default(autoincrement())
  id_produto      Int
  id_previsao     Int
  id_financeiro   Int?
  demanda_real    Int
  diferenca       Int
  precisao_modelo Float?

  produto    produto          @relation(fields: [id_produto], references: [id_produto])
  previsao   previsao_demanda @relation(fields: [id_previsao], references: [id_previsao])
  financeiro financeiro?      @relation(fields: [id_financeiro], references: [id_financeiro])
}

model relatorio {
  id_relatorio    Int      @id @default(autoincrement())
  id_usuario      Int
  tipo_relatorio  String
  caminho_arquivo String
  gerado_por      String
  gerado_em       DateTime
  status          String?

  usuario usuario @relation(fields: [id_usuario], references: [id_usuario])
}

model garantia {
  id_garantia Int      @id @default(autoincrement())
  id_produto  Int
  id_usuario  Int
  data_inicio DateTime
  data_fim    DateTime
  descricao   String?
  status      String   @default("Ativa")

  produto produto @relation("ProdutoGarantias", fields: [id_produto], references: [id_produto])
  usuario usuario @relation("UsuarioGarantias", fields: [id_usuario], references: [id_usuario])
}
